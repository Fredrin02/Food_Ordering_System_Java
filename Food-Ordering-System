import java.util.ArrayList;
import java.util.Scanner;

public class FoodOrderingSystem {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);

        // Menu items
        ArrayList<MenuItem> menuItems = new ArrayList<>();
        menuItems.add(new MenuItem("Burger", 5.99));
        menuItems.add(new MenuItem("Fries", 2.99));
        menuItems.add(new MenuItem("Drink", 1.99));

        // Order items
        ArrayList<OrderItem> orderItems = new ArrayList<>();

        // Display menu
        System.out.println("Menu:");
        for (int i = 0; i < menuItems.size(); i++) {
            System.out.println((i + 1) + ". " + menuItems.get(i).getName() + " - $" + menuItems.get(i).getPrice());
        }

        // Take order
        while (true) {
            System.out.print("Enter item number (0 to checkout): ");
            while (!scanner.hasNextInt()) {
                System.out.println("Invalid input! Please enter a number.");
                scanner.next();
            }
            int itemNumber = scanner.nextInt();

            if (itemNumber == 0) {
                break;
            }

            if (itemNumber < 1 || itemNumber > menuItems.size()) {
                System.out.println("Invalid item number!");
                continue;
            }

            MenuItem menuItem = menuItems.get(itemNumber - 1);

            System.out.print("Enter quantity: ");
            while (!scanner.hasNextInt()) {
                System.out.println("Invalid input! Please enter a number.");
                scanner.next();
            }
            int quantity = scanner.nextInt();

            OrderItem orderItem = new OrderItem(menuItem, quantity);
            orderItems.add(orderItem);

            System.out.println("Added " + orderItem.getQuantity() + " " + orderItem.getMenuItem().getName() + "(s) to order.");
        }

        // Calculate total
        double total = 0.0;
        for (OrderItem orderItem : orderItems) {
            total += orderItem.getTotalPrice();
        }

        // Display order summary
        System.out.println("\nOrder Summary:");
        for (OrderItem orderItem : orderItems) {
            System.out.println(orderItem.getQuantity() + " " + orderItem.getMenuItem().getName() + "(s) - $" + orderItem.getTotalPrice());
        }
        System.out.println("Total: $" + total);

        // Payment
        System.out.println("\nSelect payment method:");
        System.out.println("1. Cash");
        System.out.println("2. Online Banking");
        System.out.println("3. Card");
        System.out.print("Enter payment method number: ");
        while (!scanner.hasNextInt()) {
            System.out.println("Invalid input! Please enter a number.");
            scanner.next();
        }
        int paymentMethod = scanner.nextInt();

        String paymentMethodString;
        switch (paymentMethod) {
            case 1:
                paymentMethodString = "Cash On Delivery";
                CashOnDeliveryThread cashOnDeliveryThread = new CashOnDeliveryThread();
                cashOnDeliveryThread.start();
                cashOnDeliveryThread.join();
                break;
            case 2:
                paymentMethodString = "Online Payment";
                OnlinePaymentThread onlinePaymentThread = new OnlinePaymentThread();
                onlinePaymentThread.start();
                onlinePaymentThread.join();
                break;
            case 3:
                paymentMethodString = "Card";
                break;
            default:
                paymentMethodString = "Unknown";
                break;
        }

        System.out.println("Selected payment method: " + paymentMethodString);


        // Start food preparation threads
        for (OrderItem orderItem : orderItems) {
            FoodOrderThread foodOrderThread = new FoodOrderThread(orderItem);
            orderItem.setFoodOrderThread(foodOrderThread);
            foodOrderThread.start();
        }

        // Wait for food preparation threads to complete
        for (OrderItem orderItem : orderItems) {
            FoodOrderThread foodOrderThread = orderItem.getFoodOrderThread();
            foodOrderThread.join();
        }


        // Start delivery thread
        DeliveryThread deliveryThread = new DeliveryThread();
        deliveryThread.start();
        deliveryThread.join();

        System.out.println("Order delivered successfully!");

        // Prompt for feedback
        scanner.nextLine(); // Consume the remaining newline character
        System.out.print("\nPlease provide your feedback: ");
        String feedback = scanner.nextLine();

        FeedbackThread feedbackThread = new FeedbackThread(feedback);
        feedbackThread.start();
        feedbackThread.join();

        System.out.println("Thank you for your feedback!");

    }

    static class MenuItem {
        private String name;
        private double price;

        public MenuItem(String name, double price) {
            this.name = name;
            this.price = price;
        }

        public String getName() {
            return name;
        }

        public double getPrice() {
            return price;
        }
    }

    static class OrderItem {
        private MenuItem menuItem;
        private int quantity;
        private FoodOrderThread foodOrderThread;

        public OrderItem(MenuItem menuItem, int quantity) {
            this.menuItem = menuItem;
            this.quantity = quantity;
        }

        public MenuItem getMenuItem() {
            return menuItem;
        }

        public int getQuantity() {
            return quantity;
        }

        public double getTotalPrice() {
            return quantity * menuItem.getPrice();
        }

        public FoodOrderThread getFoodOrderThread() {
            return foodOrderThread;
        }

        public void setFoodOrderThread(FoodOrderThread foodOrderThread) {
            this.foodOrderThread = foodOrderThread;
        }
    }

    static class FoodOrderThread extends Thread {
        private OrderItem orderItem;

        public FoodOrderThread(OrderItem orderItem) {
            this.orderItem = orderItem;
        }

        public void run() {
            System.out.println("\nPreparing " + orderItem.getQuantity() + " " + orderItem.getMenuItem().getName() + "(s)...");
            try {
                // Simulate food preparation time
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(orderItem.getQuantity() + " " + orderItem.getMenuItem().getName() + "(s) are ready!");
        }
    }

    static class OnlinePaymentThread extends Thread {
        public void run() {
            System.out.println("Processing online payment...");
            try {
                // Simulate payment processing time
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Online payment processed successfully!");
        }
    }

    static class CashOnDeliveryThread extends Thread {
        public void run() {
            System.out.println("Preparing for cash on delivery...");
            try {
                // Simulate preparation time
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Cash on delivery is ready!");
        }
    }

    static class FeedbackThread extends Thread {
        private String feedback;

        public FeedbackThread(String feedback) {
            this.feedback = feedback;
        }

        public void run() {
            System.out.println("Submitting feedback...");
            try {
                // Simulate feedback submission time
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Feedback submitted: " + feedback);
        }
    }

    static class DeliveryThread extends Thread {
        @Override
        public void run() {
            System.out.println("\nDelivering order...");
            try {
                // Simulate delivery time
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Order delivered!");
        }
    }
}
